// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Activity represents a row from 'public.activities'.
type Activity struct {
	ID            int           `json:"id"`             // id
	UserID        sql.NullInt64 `json:"user_id"`        // user_id
	Activity      ActivityType  `json:"activity"`       // activity
	ApplicationID sql.NullInt64 `json:"application_id"` // application_id
	DeploymentID  sql.NullInt64 `json:"deployment_id"`  // deployment_id
	EnvironmentID sql.NullInt64 `json:"environment_id"` // environment_id
	CreatedAt     time.Time     `json:"created_at"`     // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Activity exists in the database.
func (a *Activity) Exists() bool {
	return a._exists
}

// Deleted provides information if the Activity has been deleted from the database.
func (a *Activity) Deleted() bool {
	return a._deleted
}

// Insert inserts the Activity to the database.
func (a *Activity) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.activities (` +
		`user_id, activity, application_id, deployment_id, environment_id, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, a.UserID, a.Activity, a.ApplicationID, a.DeploymentID, a.EnvironmentID, a.CreatedAt)
	err = db.QueryRow(sqlstr, a.UserID, a.Activity, a.ApplicationID, a.DeploymentID, a.EnvironmentID, a.CreatedAt).Scan(&a.ID)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Activity in the database.
func (a *Activity) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.activities SET (` +
		`user_id, activity, application_id, deployment_id, environment_id, created_at` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE id = $7`

	// run query
	XOLog(sqlstr, a.UserID, a.Activity, a.ApplicationID, a.DeploymentID, a.EnvironmentID, a.CreatedAt, a.ID)
	_, err = db.Exec(sqlstr, a.UserID, a.Activity, a.ApplicationID, a.DeploymentID, a.EnvironmentID, a.CreatedAt, a.ID)
	return err
}

// Save saves the Activity to the database.
func (a *Activity) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Activity.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Activity) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.activities (` +
		`id, user_id, activity, application_id, deployment_id, environment_id, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, user_id, activity, application_id, deployment_id, environment_id, created_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.user_id, EXCLUDED.activity, EXCLUDED.application_id, EXCLUDED.deployment_id, EXCLUDED.environment_id, EXCLUDED.created_at` +
		`)`

	// run query
	XOLog(sqlstr, a.ID, a.UserID, a.Activity, a.ApplicationID, a.DeploymentID, a.EnvironmentID, a.CreatedAt)
	_, err = db.Exec(sqlstr, a.ID, a.UserID, a.Activity, a.ApplicationID, a.DeploymentID, a.EnvironmentID, a.CreatedAt)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Activity from the database.
func (a *Activity) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.activities WHERE id = $1`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// Application returns the Application associated with the Activity's ApplicationID (application_id).
//
// Generated from foreign key 'activities_application_id_fkey'.
func (a *Activity) Application(db XODB) (*Application, error) {
	return ApplicationByID(db, int(a.ApplicationID.Int64))
}

// Deployment returns the Deployment associated with the Activity's DeploymentID (deployment_id).
//
// Generated from foreign key 'activities_deployment_id_fkey'.
func (a *Activity) Deployment(db XODB) (*Deployment, error) {
	return DeploymentByID(db, int(a.DeploymentID.Int64))
}

// Environment returns the Environment associated with the Activity's EnvironmentID (environment_id).
//
// Generated from foreign key 'activities_environment_id_fkey'.
func (a *Activity) Environment(db XODB) (*Environment, error) {
	return EnvironmentByID(db, int(a.EnvironmentID.Int64))
}

// User returns the User associated with the Activity's UserID (user_id).
//
// Generated from foreign key 'activities_user_id_fkey'.
func (a *Activity) User(db XODB) (*User, error) {
	return UserByID(db, int(a.UserID.Int64))
}

// ActivityByID retrieves a row from 'public.activities' as a Activity.
//
// Generated from index 'activities_pkey'.
func ActivityByID(db XODB, id int) (*Activity, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, activity, application_id, deployment_id, environment_id, created_at ` +
		`FROM public.activities ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	a := Activity{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.UserID, &a.Activity, &a.ApplicationID, &a.DeploymentID, &a.EnvironmentID, &a.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
