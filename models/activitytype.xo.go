// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// ActivityType is the 'activity_type' enum type from schema 'public'.
type ActivityType uint16

const (
	// ActivityTypeApplicationCreated is the 'application_created' ActivityType.
	ActivityTypeApplicationCreated = ActivityType(1)

	// ActivityTypeDeploymentStarted is the 'deployment_started' ActivityType.
	ActivityTypeDeploymentStarted = ActivityType(2)

	// ActivityTypeDeploymentSuccess is the 'deployment_success' ActivityType.
	ActivityTypeDeploymentSuccess = ActivityType(3)

	// ActivityTypeDeploymentFailure is the 'deployment_failure' ActivityType.
	ActivityTypeDeploymentFailure = ActivityType(4)

	// ActivityTypeEnvironmentCreated is the 'environment_created' ActivityType.
	ActivityTypeEnvironmentCreated = ActivityType(5)

	// ActivityTypeEnvironmentDestroyed is the 'environment_destroyed' ActivityType.
	ActivityTypeEnvironmentDestroyed = ActivityType(6)
)

// String returns the string value of the ActivityType.
func (at ActivityType) String() string {
	var enumVal string

	switch at {
	case ActivityTypeApplicationCreated:
		enumVal = "application_created"

	case ActivityTypeDeploymentStarted:
		enumVal = "deployment_started"

	case ActivityTypeDeploymentSuccess:
		enumVal = "deployment_success"

	case ActivityTypeDeploymentFailure:
		enumVal = "deployment_failure"

	case ActivityTypeEnvironmentCreated:
		enumVal = "environment_created"

	case ActivityTypeEnvironmentDestroyed:
		enumVal = "environment_destroyed"
	}

	return enumVal
}

// MarshalText marshals ActivityType into text.
func (at ActivityType) MarshalText() ([]byte, error) {
	return []byte(at.String()), nil
}

// UnmarshalText unmarshals ActivityType from text.
func (at *ActivityType) UnmarshalText(text []byte) error {
	switch string(text) {
	case "application_created":
		*at = ActivityTypeApplicationCreated

	case "deployment_started":
		*at = ActivityTypeDeploymentStarted

	case "deployment_success":
		*at = ActivityTypeDeploymentSuccess

	case "deployment_failure":
		*at = ActivityTypeDeploymentFailure

	case "environment_created":
		*at = ActivityTypeEnvironmentCreated

	case "environment_destroyed":
		*at = ActivityTypeEnvironmentDestroyed

	default:
		return errors.New("invalid ActivityType")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for ActivityType.
func (at ActivityType) Value() (driver.Value, error) {
	return at.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for ActivityType.
func (at *ActivityType) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid ActivityType")
	}

	return at.UnmarshalText(buf)
}
