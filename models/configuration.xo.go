// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Configuration represents a row from 'public.configurations'.
type Configuration struct {
	EnvironmentID int       `json:"environment_id"` // environment_id
	Version       int       `json:"version"`        // version
	CreatedAt     time.Time `json:"created_at"`     // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Configuration exists in the database.
func (c *Configuration) Exists() bool {
	return c._exists
}

// Deleted provides information if the Configuration has been deleted from the database.
func (c *Configuration) Deleted() bool {
	return c._deleted
}

// Insert inserts the Configuration to the database.
func (c *Configuration) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.configurations (` +
		`environment_id, created_at` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING version`

	// run query
	XOLog(sqlstr, c.EnvironmentID, c.CreatedAt)
	err = db.QueryRow(sqlstr, c.EnvironmentID, c.CreatedAt).Scan(&c.Version)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Configuration in the database.
func (c *Configuration) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.configurations SET (` +
		`environment_id, created_at` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE version = $3`

	// run query
	XOLog(sqlstr, c.EnvironmentID, c.CreatedAt, c.Version)
	_, err = db.Exec(sqlstr, c.EnvironmentID, c.CreatedAt, c.Version)
	return err
}

// Save saves the Configuration to the database.
func (c *Configuration) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Configuration.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Configuration) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.configurations (` +
		`environment_id, version, created_at` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (version) DO UPDATE SET (` +
		`environment_id, version, created_at` +
		`) = (` +
		`EXCLUDED.environment_id, EXCLUDED.version, EXCLUDED.created_at` +
		`)`

	// run query
	XOLog(sqlstr, c.EnvironmentID, c.Version, c.CreatedAt)
	_, err = db.Exec(sqlstr, c.EnvironmentID, c.Version, c.CreatedAt)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Configuration from the database.
func (c *Configuration) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.configurations WHERE version = $1`

	// run query
	XOLog(sqlstr, c.Version)
	_, err = db.Exec(sqlstr, c.Version)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// Environment returns the Environment associated with the Configuration's EnvironmentID (environment_id).
//
// Generated from foreign key 'configurations_environment_id_fkey'.
func (c *Configuration) Environment(db XODB) (*Environment, error) {
	return EnvironmentByID(db, c.EnvironmentID)
}

// ConfigurationByEnvironmentIDVersion retrieves a row from 'public.configurations' as a Configuration.
//
// Generated from index 'configurations_pkey'.
func ConfigurationByEnvironmentIDVersion(db XODB, environmentID int, version int) (*Configuration, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`environment_id, version, created_at ` +
		`FROM public.configurations ` +
		`WHERE environment_id = $1 AND version = $2`

	// run query
	XOLog(sqlstr, environmentID, version)
	c := Configuration{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, environmentID, version).Scan(&c.EnvironmentID, &c.Version, &c.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
