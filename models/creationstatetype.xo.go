// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// CreationStateType is the 'creation_state_type' enum type from schema 'public'.
type CreationStateType uint16

const (
	// CreationStateTypeCreateInfrastructureWait is the 'CREATE_INFRASTRUCTURE_WAIT' CreationStateType.
	CreationStateTypeCreateInfrastructureWait = CreationStateType(1)

	// CreationStateTypeCreateInfrastructureSucceeded is the 'CREATE_INFRASTRUCTURE_SUCCEEDED' CreationStateType.
	CreationStateTypeCreateInfrastructureSucceeded = CreationStateType(2)

	// CreationStateTypeCreateInfrastructureFailed is the 'CREATE_INFRASTRUCTURE_FAILED' CreationStateType.
	CreationStateTypeCreateInfrastructureFailed = CreationStateType(3)
)

// String returns the string value of the CreationStateType.
func (cst CreationStateType) String() string {
	var enumVal string

	switch cst {
	case CreationStateTypeCreateInfrastructureWait:
		enumVal = "CREATE_INFRASTRUCTURE_WAIT"

	case CreationStateTypeCreateInfrastructureSucceeded:
		enumVal = "CREATE_INFRASTRUCTURE_SUCCEEDED"

	case CreationStateTypeCreateInfrastructureFailed:
		enumVal = "CREATE_INFRASTRUCTURE_FAILED"
	}

	return enumVal
}

// MarshalText marshals CreationStateType into text.
func (cst CreationStateType) MarshalText() ([]byte, error) {
	return []byte(cst.String()), nil
}

// UnmarshalText unmarshals CreationStateType from text.
func (cst *CreationStateType) UnmarshalText(text []byte) error {
	switch string(text) {
	case "CREATE_INFRASTRUCTURE_WAIT":
		*cst = CreationStateTypeCreateInfrastructureWait

	case "CREATE_INFRASTRUCTURE_SUCCEEDED":
		*cst = CreationStateTypeCreateInfrastructureSucceeded

	case "CREATE_INFRASTRUCTURE_FAILED":
		*cst = CreationStateTypeCreateInfrastructureFailed

	default:
		return errors.New("invalid CreationStateType")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for CreationStateType.
func (cst CreationStateType) Value() (driver.Value, error) {
	return cst.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for CreationStateType.
func (cst *CreationStateType) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid CreationStateType")
	}

	return cst.UnmarshalText(buf)
}
