// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Deployment represents a row from 'public.deployments'.
type Deployment struct {
	ID            int           `json:"id"`             // id
	ApplicationID sql.NullInt64 `json:"application_id"` // application_id
	EnvironmentID sql.NullInt64 `json:"environment_id"` // environment_id
	Committish    string        `json:"committish"`     // committish
	CurrentState  string        `json:"current_state"`  // current_state
	CreatedAt     time.Time     `json:"created_at"`     // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Deployment exists in the database.
func (d *Deployment) Exists() bool {
	return d._exists
}

// Deleted provides information if the Deployment has been deleted from the database.
func (d *Deployment) Deleted() bool {
	return d._deleted
}

// Insert inserts the Deployment to the database.
func (d *Deployment) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if d._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.deployments (` +
		`application_id, environment_id, committish, current_state, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, d.ApplicationID, d.EnvironmentID, d.Committish, d.CurrentState, d.CreatedAt)
	err = db.QueryRow(sqlstr, d.ApplicationID, d.EnvironmentID, d.Committish, d.CurrentState, d.CreatedAt).Scan(&d.ID)
	if err != nil {
		return err
	}

	// set existence
	d._exists = true

	return nil
}

// Update updates the Deployment in the database.
func (d *Deployment) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if d._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.deployments SET (` +
		`application_id, environment_id, committish, current_state, created_at` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE id = $6`

	// run query
	XOLog(sqlstr, d.ApplicationID, d.EnvironmentID, d.Committish, d.CurrentState, d.CreatedAt, d.ID)
	_, err = db.Exec(sqlstr, d.ApplicationID, d.EnvironmentID, d.Committish, d.CurrentState, d.CreatedAt, d.ID)
	return err
}

// Save saves the Deployment to the database.
func (d *Deployment) Save(db XODB) error {
	if d.Exists() {
		return d.Update(db)
	}

	return d.Insert(db)
}

// Upsert performs an upsert for Deployment.
//
// NOTE: PostgreSQL 9.5+ only
func (d *Deployment) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if d._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.deployments (` +
		`id, application_id, environment_id, committish, current_state, created_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, application_id, environment_id, committish, current_state, created_at` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.application_id, EXCLUDED.environment_id, EXCLUDED.committish, EXCLUDED.current_state, EXCLUDED.created_at` +
		`)`

	// run query
	XOLog(sqlstr, d.ID, d.ApplicationID, d.EnvironmentID, d.Committish, d.CurrentState, d.CreatedAt)
	_, err = db.Exec(sqlstr, d.ID, d.ApplicationID, d.EnvironmentID, d.Committish, d.CurrentState, d.CreatedAt)
	if err != nil {
		return err
	}

	// set existence
	d._exists = true

	return nil
}

// Delete deletes the Deployment from the database.
func (d *Deployment) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !d._exists {
		return nil
	}

	// if deleted, bail
	if d._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.deployments WHERE id = $1`

	// run query
	XOLog(sqlstr, d.ID)
	_, err = db.Exec(sqlstr, d.ID)
	if err != nil {
		return err
	}

	// set deleted
	d._deleted = true

	return nil
}

// Application returns the Application associated with the Deployment's ApplicationID (application_id).
//
// Generated from foreign key 'deployments_application_id_fkey'.
func (d *Deployment) Application(db XODB) (*Application, error) {
	return ApplicationByID(db, int(d.ApplicationID.Int64))
}

// DeploymentByID retrieves a row from 'public.deployments' as a Deployment.
//
// Generated from index 'deployments_pkey'.
func DeploymentByID(db XODB, id int) (*Deployment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, application_id, environment_id, committish, current_state, created_at ` +
		`FROM public.deployments ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	d := Deployment{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&d.ID, &d.ApplicationID, &d.EnvironmentID, &d.Committish, &d.CurrentState, &d.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &d, nil
}
