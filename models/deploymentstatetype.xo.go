// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// DeploymentStateType is the 'deployment_state_type' enum type from schema 'public'.
type DeploymentStateType uint16

const (
	// DeploymentStateTypeDeploymentRolloutWait is the 'DEPLOYMENT_ROLLOUT_WAIT' DeploymentStateType.
	DeploymentStateTypeDeploymentRolloutWait = DeploymentStateType(1)

	// DeploymentStateTypeDeploymentEvaluateWait is the 'DEPLOYMENT_EVALUATE_WAIT' DeploymentStateType.
	DeploymentStateTypeDeploymentEvaluateWait = DeploymentStateType(2)

	// DeploymentStateTypeDeploymentRollForward is the 'DEPLOYMENT_ROLL_FORWARD' DeploymentStateType.
	DeploymentStateTypeDeploymentRollForward = DeploymentStateType(3)

	// DeploymentStateTypeDeploymentSucceeded is the 'DEPLOYMENT_SUCCEEDED' DeploymentStateType.
	DeploymentStateTypeDeploymentSucceeded = DeploymentStateType(4)

	// DeploymentStateTypeDeploymentFailed is the 'DEPLOYMENT_FAILED' DeploymentStateType.
	DeploymentStateTypeDeploymentFailed = DeploymentStateType(5)
)

// String returns the string value of the DeploymentStateType.
func (dst DeploymentStateType) String() string {
	var enumVal string

	switch dst {
	case DeploymentStateTypeDeploymentRolloutWait:
		enumVal = "DEPLOYMENT_ROLLOUT_WAIT"

	case DeploymentStateTypeDeploymentEvaluateWait:
		enumVal = "DEPLOYMENT_EVALUATE_WAIT"

	case DeploymentStateTypeDeploymentRollForward:
		enumVal = "DEPLOYMENT_ROLL_FORWARD"

	case DeploymentStateTypeDeploymentSucceeded:
		enumVal = "DEPLOYMENT_SUCCEEDED"

	case DeploymentStateTypeDeploymentFailed:
		enumVal = "DEPLOYMENT_FAILED"
	}

	return enumVal
}

// MarshalText marshals DeploymentStateType into text.
func (dst DeploymentStateType) MarshalText() ([]byte, error) {
	return []byte(dst.String()), nil
}

// UnmarshalText unmarshals DeploymentStateType from text.
func (dst *DeploymentStateType) UnmarshalText(text []byte) error {
	switch string(text) {
	case "DEPLOYMENT_ROLLOUT_WAIT":
		*dst = DeploymentStateTypeDeploymentRolloutWait

	case "DEPLOYMENT_EVALUATE_WAIT":
		*dst = DeploymentStateTypeDeploymentEvaluateWait

	case "DEPLOYMENT_ROLL_FORWARD":
		*dst = DeploymentStateTypeDeploymentRollForward

	case "DEPLOYMENT_SUCCEEDED":
		*dst = DeploymentStateTypeDeploymentSucceeded

	case "DEPLOYMENT_FAILED":
		*dst = DeploymentStateTypeDeploymentFailed

	default:
		return errors.New("invalid DeploymentStateType")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for DeploymentStateType.
func (dst DeploymentStateType) Value() (driver.Value, error) {
	return dst.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for DeploymentStateType.
func (dst *DeploymentStateType) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid DeploymentStateType")
	}

	return dst.UnmarshalText(buf)
}
