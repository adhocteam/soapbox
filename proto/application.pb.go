// Code generated by protoc-gen-go. DO NOT EDIT.
// source: application.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ApplicationType int32

const (
	ApplicationType_SERVER  ApplicationType = 0
	ApplicationType_CRONJOB ApplicationType = 1
)

var ApplicationType_name = map[int32]string{
	0: "SERVER",
	1: "CRONJOB",
}
var ApplicationType_value = map[string]int32{
	"SERVER":  0,
	"CRONJOB": 1,
}

func (x ApplicationType) String() string {
	return proto1.EnumName(ApplicationType_name, int32(x))
}
func (ApplicationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type CreationState int32

const (
	CreationState_CREATE_INFRASTRUCTURE_WAIT CreationState = 0
	CreationState_SUCCEEDED                  CreationState = 1
	CreationState_FAILED                     CreationState = 2
)

var CreationState_name = map[int32]string{
	0: "CREATE_INFRASTRUCTURE_WAIT",
	1: "SUCCEEDED",
	2: "FAILED",
}
var CreationState_value = map[string]int32{
	"CREATE_INFRASTRUCTURE_WAIT": 0,
	"SUCCEEDED":                  1,
	"FAILED":                     2,
}

func (x CreationState) String() string {
	return proto1.EnumName(CreationState_name, int32(x))
}
func (CreationState) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type Application struct {
	Id                 int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId             int32                      `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Name               string                     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description        string                     `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	ExternalDns        string                     `protobuf:"bytes,5,opt,name=external_dns,json=externalDns" json:"external_dns,omitempty"`
	GithubRepoUrl      string                     `protobuf:"bytes,6,opt,name=github_repo_url,json=githubRepoUrl" json:"github_repo_url,omitempty"`
	DockerfilePath     string                     `protobuf:"bytes,7,opt,name=dockerfile_path,json=dockerfilePath" json:"dockerfile_path,omitempty"`
	EntrypointOverride string                     `protobuf:"bytes,8,opt,name=entrypoint_override,json=entrypointOverride" json:"entrypoint_override,omitempty"`
	Type               ApplicationType            `protobuf:"varint,9,opt,name=type,enum=soapbox.ApplicationType" json:"type,omitempty"`
	CreatedAt          *google_protobuf.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Slug               string                     `protobuf:"bytes,11,opt,name=slug" json:"slug,omitempty"`
	InternalDns        string                     `protobuf:"bytes,12,opt,name=internal_dns,json=internalDns" json:"internal_dns,omitempty"`
	CreationState      CreationState              `protobuf:"varint,13,opt,name=creation_state,json=creationState,enum=soapbox.CreationState" json:"creation_state,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto1.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Application) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Application) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Application) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Application) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Application) GetExternalDns() string {
	if m != nil {
		return m.ExternalDns
	}
	return ""
}

func (m *Application) GetGithubRepoUrl() string {
	if m != nil {
		return m.GithubRepoUrl
	}
	return ""
}

func (m *Application) GetDockerfilePath() string {
	if m != nil {
		return m.DockerfilePath
	}
	return ""
}

func (m *Application) GetEntrypointOverride() string {
	if m != nil {
		return m.EntrypointOverride
	}
	return ""
}

func (m *Application) GetType() ApplicationType {
	if m != nil {
		return m.Type
	}
	return ApplicationType_SERVER
}

func (m *Application) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Application) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Application) GetInternalDns() string {
	if m != nil {
		return m.InternalDns
	}
	return ""
}

func (m *Application) GetCreationState() CreationState {
	if m != nil {
		return m.CreationState
	}
	return CreationState_CREATE_INFRASTRUCTURE_WAIT
}

type ListApplicationRequest struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ListApplicationRequest) Reset()                    { *m = ListApplicationRequest{} }
func (m *ListApplicationRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListApplicationRequest) ProtoMessage()               {}
func (*ListApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ListApplicationRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type ListApplicationResponse struct {
	Applications []*Application `protobuf:"bytes,1,rep,name=applications" json:"applications,omitempty"`
}

func (m *ListApplicationResponse) Reset()                    { *m = ListApplicationResponse{} }
func (m *ListApplicationResponse) String() string            { return proto1.CompactTextString(m) }
func (*ListApplicationResponse) ProtoMessage()               {}
func (*ListApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ListApplicationResponse) GetApplications() []*Application {
	if m != nil {
		return m.Applications
	}
	return nil
}

type GetApplicationRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetApplicationRequest) Reset()                    { *m = GetApplicationRequest{} }
func (m *GetApplicationRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetApplicationRequest) ProtoMessage()               {}
func (*GetApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetApplicationRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto1.RegisterType((*Application)(nil), "soapbox.Application")
	proto1.RegisterType((*ListApplicationRequest)(nil), "soapbox.ListApplicationRequest")
	proto1.RegisterType((*ListApplicationResponse)(nil), "soapbox.ListApplicationResponse")
	proto1.RegisterType((*GetApplicationRequest)(nil), "soapbox.GetApplicationRequest")
	proto1.RegisterEnum("soapbox.ApplicationType", ApplicationType_name, ApplicationType_value)
	proto1.RegisterEnum("soapbox.CreationState", CreationState_name, CreationState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Applications service

type ApplicationsClient interface {
	ListApplications(ctx context.Context, in *ListApplicationRequest, opts ...grpc.CallOption) (*ListApplicationResponse, error)
	CreateApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Application, error)
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error)
}

type applicationsClient struct {
	cc *grpc.ClientConn
}

func NewApplicationsClient(cc *grpc.ClientConn) ApplicationsClient {
	return &applicationsClient{cc}
}

func (c *applicationsClient) ListApplications(ctx context.Context, in *ListApplicationRequest, opts ...grpc.CallOption) (*ListApplicationResponse, error) {
	out := new(ListApplicationResponse)
	err := grpc.Invoke(ctx, "/soapbox.Applications/ListApplications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) CreateApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := grpc.Invoke(ctx, "/soapbox.Applications/CreateApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := grpc.Invoke(ctx, "/soapbox.Applications/GetApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Applications service

type ApplicationsServer interface {
	ListApplications(context.Context, *ListApplicationRequest) (*ListApplicationResponse, error)
	CreateApplication(context.Context, *Application) (*Application, error)
	GetApplication(context.Context, *GetApplicationRequest) (*Application, error)
}

func RegisterApplicationsServer(s *grpc.Server, srv ApplicationsServer) {
	s.RegisterService(&_Applications_serviceDesc, srv)
}

func _Applications_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.Applications/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).ListApplications(ctx, req.(*ListApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.Applications/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).CreateApplication(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.Applications/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Applications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "soapbox.Applications",
	HandlerType: (*ApplicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApplications",
			Handler:    _Applications_ListApplications_Handler,
		},
		{
			MethodName: "CreateApplication",
			Handler:    _Applications_CreateApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _Applications_GetApplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application.proto",
}

func init() { proto1.RegisterFile("application.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xcf, 0x4e, 0xdb, 0x40,
	0x10, 0xc6, 0xe3, 0x00, 0x49, 0x33, 0xf9, 0x43, 0xd8, 0xb6, 0xb0, 0xca, 0x01, 0xdc, 0x1c, 0x4a,
	0x84, 0xaa, 0xa0, 0xa6, 0x97, 0xf6, 0xd0, 0x83, 0x49, 0x4c, 0x1b, 0x84, 0xa0, 0xda, 0x24, 0x45,
	0xea, 0xc5, 0x32, 0xf1, 0x10, 0x56, 0x35, 0xde, 0xed, 0xee, 0xa6, 0x82, 0xb7, 0xee, 0xa1, 0x0f,
	0x50, 0x79, 0x9d, 0x80, 0xa1, 0xe1, 0xe4, 0x9d, 0x6f, 0x3e, 0x8f, 0x67, 0x7e, 0x3b, 0x86, 0xad,
	0x50, 0xca, 0x98, 0x4f, 0x43, 0xc3, 0x45, 0xd2, 0x95, 0x4a, 0x18, 0x41, 0xca, 0x5a, 0x84, 0xf2,
	0x52, 0xdc, 0xb6, 0xea, 0x8b, 0x43, 0xa6, 0xb7, 0xf6, 0x66, 0x42, 0xcc, 0x62, 0x3c, 0xb4, 0xd1,
	0xe5, 0xfc, 0xea, 0xd0, 0xf0, 0x1b, 0xd4, 0x26, 0xbc, 0x91, 0x99, 0xa1, 0xfd, 0x67, 0x0d, 0xaa,
	0xde, 0x43, 0x39, 0xd2, 0x80, 0x22, 0x8f, 0xa8, 0xe3, 0x3a, 0x9d, 0x0d, 0x56, 0xe4, 0x11, 0xd9,
	0x81, 0xf2, 0x5c, 0xa3, 0x0a, 0x78, 0x44, 0x8b, 0x56, 0x2c, 0xa5, 0xe1, 0x30, 0x22, 0x04, 0xd6,
	0x93, 0xf0, 0x06, 0xe9, 0x9a, 0xeb, 0x74, 0x2a, 0xcc, 0x9e, 0x89, 0x0b, 0xd5, 0x08, 0xf5, 0x54,
	0x71, 0x99, 0xd6, 0xa2, 0xeb, 0x36, 0x95, 0x97, 0xc8, 0x1b, 0xa8, 0xe1, 0xad, 0x41, 0x95, 0x84,
	0x71, 0x10, 0x25, 0x9a, 0x6e, 0x64, 0x96, 0xa5, 0x36, 0x48, 0x34, 0x79, 0x0b, 0x9b, 0x33, 0x6e,
	0xae, 0xe7, 0x97, 0x81, 0x42, 0x29, 0x82, 0xb9, 0x8a, 0x69, 0xc9, 0xba, 0xea, 0x99, 0xcc, 0x50,
	0x8a, 0x89, 0x8a, 0xc9, 0x3e, 0x6c, 0x46, 0x62, 0xfa, 0x13, 0xd5, 0x15, 0x8f, 0x31, 0x90, 0xa1,
	0xb9, 0xa6, 0x65, 0xeb, 0x6b, 0x3c, 0xc8, 0xdf, 0x42, 0x73, 0x4d, 0x0e, 0xe1, 0x25, 0x26, 0x46,
	0xdd, 0x49, 0xc1, 0x13, 0x13, 0x88, 0xdf, 0xa8, 0x14, 0x8f, 0x90, 0xbe, 0xb0, 0x66, 0xf2, 0x90,
	0x3a, 0x5f, 0x64, 0xc8, 0x3b, 0x58, 0x37, 0x77, 0x12, 0x69, 0xc5, 0x75, 0x3a, 0x8d, 0x1e, 0xed,
	0x2e, 0x91, 0xe6, 0x38, 0x8d, 0xef, 0x24, 0x32, 0xeb, 0x22, 0x9f, 0x00, 0xa6, 0x0a, 0x43, 0x83,
	0x51, 0x10, 0x1a, 0x0a, 0xae, 0xd3, 0xa9, 0xf6, 0x5a, 0xdd, 0x8c, 0x7b, 0x77, 0xc9, 0xbd, 0x3b,
	0x5e, 0x72, 0x67, 0x95, 0x85, 0xdb, 0x33, 0x29, 0x43, 0x1d, 0xcf, 0x67, 0xb4, 0x9a, 0x31, 0x4c,
	0xcf, 0x29, 0x21, 0x9e, 0xe4, 0x08, 0xd5, 0x32, 0x42, 0x4b, 0x2d, 0x25, 0xf4, 0x19, 0x1a, 0xb6,
	0x06, 0x17, 0x49, 0xa0, 0x4d, 0x68, 0x90, 0xd6, 0x6d, 0xa7, 0xdb, 0xf7, 0x9d, 0xf6, 0x17, 0xe9,
	0x51, 0x9a, 0x65, 0xf5, 0x69, 0x3e, 0x6c, 0xbf, 0x87, 0xed, 0x53, 0xae, 0x4d, 0x6e, 0x1a, 0x86,
	0xbf, 0xe6, 0xa8, 0x4d, 0xfe, 0xb2, 0x9d, 0xfc, 0x65, 0xb7, 0x47, 0xb0, 0xf3, 0xdf, 0x2b, 0x5a,
	0x8a, 0x44, 0x23, 0xf9, 0x08, 0xb5, 0xdc, 0x3a, 0x6a, 0xea, 0xb8, 0x6b, 0x9d, 0x6a, 0xef, 0xd5,
	0x2a, 0x68, 0xec, 0x91, 0xb3, 0xbd, 0x0f, 0xaf, 0xbf, 0xe0, 0xaa, 0x36, 0x9e, 0xec, 0xe0, 0xc1,
	0x01, 0x6c, 0x3e, 0x41, 0x4f, 0x00, 0x4a, 0x23, 0x9f, 0x7d, 0xf7, 0x59, 0xb3, 0x40, 0xaa, 0x50,
	0xee, 0xb3, 0xf3, 0xb3, 0x93, 0xf3, 0xa3, 0xa6, 0x73, 0x70, 0x02, 0xf5, 0x47, 0xc3, 0x93, 0x5d,
	0x68, 0xf5, 0x99, 0xef, 0x8d, 0xfd, 0x60, 0x78, 0x76, 0xcc, 0xbc, 0xd1, 0x98, 0x4d, 0xfa, 0xe3,
	0x09, 0xf3, 0x83, 0x0b, 0x6f, 0x38, 0x6e, 0x16, 0x48, 0x1d, 0x2a, 0xa3, 0x49, 0xbf, 0xef, 0xfb,
	0x03, 0x7f, 0xd0, 0x74, 0xd2, 0xc2, 0xc7, 0xde, 0xf0, 0xd4, 0x1f, 0x34, 0x8b, 0xbd, 0xbf, 0x0e,
	0xd4, 0x72, 0x1f, 0xd6, 0xe4, 0x02, 0x9a, 0x4f, 0x30, 0x68, 0xb2, 0x77, 0x3f, 0xe9, 0x6a, 0xa8,
	0x2d, 0xf7, 0x79, 0x43, 0x86, 0xb0, 0x5d, 0x20, 0x1e, 0x6c, 0xd9, 0xae, 0x31, 0xff, 0x2b, 0xae,
	0x64, 0xd8, 0x5a, 0xa9, 0xb6, 0x0b, 0xe4, 0x2b, 0x34, 0x1e, 0xd3, 0x24, 0xbb, 0xf7, 0xce, 0x95,
	0x98, 0x9f, 0xab, 0x74, 0x54, 0xfe, 0xb1, 0x91, 0xad, 0x6d, 0xc9, 0x3e, 0x3e, 0xfc, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0x3d, 0x10, 0x1e, 0x9c, 0x70, 0x04, 0x00, 0x00,
}
