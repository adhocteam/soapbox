// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	Id                     int32                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                   string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email                  string                     `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	EncryptedPassword      string                     `protobuf:"bytes,4,opt,name=encrypted_password,json=encryptedPassword" json:"encrypted_password,omitempty"`
	GithubOauthAccessToken string                     `protobuf:"bytes,5,opt,name=github_oauth_access_token,json=githubOauthAccessToken" json:"github_oauth_access_token,omitempty"`
	CreatedAt              *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto1.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetEncryptedPassword() string {
	if m != nil {
		return m.EncryptedPassword
	}
	return ""
}

func (m *User) GetGithubOauthAccessToken() string {
	if m != nil {
		return m.GithubOauthAccessToken
	}
	return ""
}

func (m *User) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type CreateUserRequest struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CreateUserRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type GetUserRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *GetUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type LoginUserRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginUserRequest) Reset()                    { *m = LoginUserRequest{} }
func (m *LoginUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*LoginUserRequest) ProtoMessage()               {}
func (*LoginUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *LoginUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginUserResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	User  *User  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *LoginUserResponse) Reset()                    { *m = LoginUserResponse{} }
func (m *LoginUserResponse) String() string            { return proto1.CompactTextString(m) }
func (*LoginUserResponse) ProtoMessage()               {}
func (*LoginUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *LoginUserResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *LoginUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto1.RegisterType((*User)(nil), "soapbox.User")
	proto1.RegisterType((*CreateUserRequest)(nil), "soapbox.CreateUserRequest")
	proto1.RegisterType((*GetUserRequest)(nil), "soapbox.GetUserRequest")
	proto1.RegisterType((*LoginUserRequest)(nil), "soapbox.LoginUserRequest")
	proto1.RegisterType((*LoginUserResponse)(nil), "soapbox.LoginUserResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Users service

type UsersClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	AssignGithubOmniauthTokenToUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/soapbox.Users/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/soapbox.Users/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := grpc.Invoke(ctx, "/soapbox.Users/LoginUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) AssignGithubOmniauthTokenToUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/soapbox.Users/AssignGithubOmniauthTokenToUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	AssignGithubOmniauthTokenToUser(context.Context, *User) (*User, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.Users/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.Users/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.Users/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_AssignGithubOmniauthTokenToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).AssignGithubOmniauthTokenToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.Users/AssignGithubOmniauthTokenToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).AssignGithubOmniauthTokenToUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "soapbox.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Users_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Users_GetUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Users_LoginUser_Handler,
		},
		{
			MethodName: "AssignGithubOmniauthTokenToUser",
			Handler:    _Users_AssignGithubOmniauthTokenToUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto1.RegisterFile("user.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x31, 0xaf, 0xd3, 0x30,
	0x18, 0x7c, 0x09, 0xc9, 0x2b, 0xfd, 0x9e, 0xa8, 0xa8, 0x85, 0x20, 0xcd, 0xd2, 0x92, 0x01, 0x75,
	0x21, 0x95, 0xda, 0xa9, 0x63, 0xa0, 0x52, 0x97, 0x4a, 0xa0, 0xa8, 0x2c, 0x2c, 0x91, 0x9b, 0x98,
	0xd4, 0xa2, 0x89, 0x83, 0xed, 0x08, 0xd8, 0xf8, 0xb3, 0xfc, 0x0f, 0x64, 0x3b, 0x35, 0x4d, 0x8b,
	0xc4, 0xf0, 0xa6, 0xe4, 0xf3, 0x9d, 0xef, 0xf3, 0x9d, 0x0e, 0xa0, 0x15, 0x84, 0xc7, 0x0d, 0x67,
	0x92, 0xa1, 0x81, 0x60, 0xb8, 0x39, 0xb0, 0x1f, 0xe1, 0xb4, 0x64, 0xac, 0x3c, 0x91, 0x85, 0x3e,
	0x3e, 0xb4, 0x5f, 0x16, 0x92, 0x56, 0x44, 0x48, 0x5c, 0x35, 0x86, 0x19, 0xfd, 0x76, 0xc0, 0xfb,
	0x24, 0x08, 0x47, 0x23, 0x70, 0x69, 0x11, 0x38, 0x33, 0x67, 0xee, 0xa7, 0x2e, 0x2d, 0x10, 0x02,
	0xaf, 0xc6, 0x15, 0x09, 0xdc, 0x99, 0x33, 0x1f, 0xa6, 0xfa, 0x1f, 0xbd, 0x00, 0x9f, 0x54, 0x98,
	0x9e, 0x82, 0x27, 0xfa, 0xd0, 0x0c, 0xe8, 0x2d, 0x20, 0x52, 0xe7, 0xfc, 0x67, 0x23, 0x49, 0x91,
	0x35, 0x58, 0x88, 0xef, 0x8c, 0x17, 0x81, 0xa7, 0x29, 0x63, 0x8b, 0x7c, 0xec, 0x00, 0xb4, 0x86,
	0x49, 0x49, 0xe5, 0xb1, 0x3d, 0x64, 0x0c, 0xb7, 0xf2, 0x98, 0xe1, 0x3c, 0x27, 0x42, 0x64, 0x92,
	0x7d, 0x25, 0x75, 0xe0, 0xeb, 0x5b, 0x2f, 0x0d, 0xe1, 0x83, 0xc2, 0x13, 0x0d, 0xef, 0x15, 0x8a,
	0xd6, 0x00, 0x39, 0x27, 0x58, 0xed, 0xc1, 0x32, 0xb8, 0x9f, 0x39, 0xf3, 0x87, 0x65, 0x18, 0x1b,
	0x8b, 0xf1, 0xd9, 0x62, 0xbc, 0x3f, 0x5b, 0x4c, 0x87, 0x1d, 0x3b, 0x91, 0x11, 0x85, 0xf1, 0x7b,
	0x3d, 0x28, 0xb3, 0x29, 0xf9, 0xd6, 0x12, 0x21, 0x1f, 0xe1, 0x39, 0x84, 0xa7, 0x57, 0x4e, 0xed,
	0x1c, 0xbd, 0x81, 0xd1, 0x96, 0xc8, 0xcb, 0x3d, 0x56, 0xc3, 0xb9, 0xd0, 0x88, 0x36, 0xf0, 0x7c,
	0xc7, 0x4a, 0x5a, 0xff, 0x97, 0xd9, 0xdb, 0xe6, 0x5e, 0x6d, 0xdb, 0xc1, 0xf8, 0x42, 0x45, 0x34,
	0xac, 0x16, 0xe6, 0xd1, 0x9c, 0x33, 0x6e, 0x65, 0xd4, 0x80, 0x5e, 0x83, 0xa7, 0x3a, 0xa2, 0x25,
	0x1e, 0x96, 0xcf, 0xe2, 0xae, 0x24, 0xb1, 0xbe, 0xaa, 0xa1, 0xe5, 0x2f, 0x17, 0x7c, 0x35, 0x0a,
	0x95, 0xf5, 0xdf, 0xc0, 0x50, 0x68, 0xc9, 0x37, 0x29, 0x86, 0x7d, 0xa1, 0xe8, 0x0e, 0xad, 0x60,
	0xd0, 0x05, 0x80, 0x5e, 0x59, 0xac, 0x1f, 0xc9, 0xed, 0xa5, 0x0d, 0x0c, 0xad, 0x0f, 0x34, 0xb1,
	0xe8, 0x75, 0x42, 0x61, 0xf8, 0x2f, 0xc8, 0xd8, 0x8e, 0xee, 0x50, 0x02, 0xd3, 0x44, 0x08, 0x5a,
	0xd6, 0x5b, 0xd3, 0xa0, 0xaa, 0xa6, 0xaa, 0x44, 0xba, 0x3e, 0x7b, 0xa6, 0xb5, 0xfb, 0x9b, 0x6f,
	0x1e, 0xf2, 0x6e, 0xf0, 0xd9, 0x37, 0x55, 0xba, 0xd7, 0x9f, 0xd5, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xc9, 0x45, 0x0f, 0x2a, 0x59, 0x03, 0x00, 0x00,
}
