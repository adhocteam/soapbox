// Code generated by protoc-gen-go. DO NOT EDIT.
// source: environment.proto

package soapboxpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListEnvironmentRequest struct {
	ApplicationId int32 `protobuf:"varint,1,opt,name=application_id,json=applicationId" json:"application_id,omitempty"`
}

func (m *ListEnvironmentRequest) Reset()                    { *m = ListEnvironmentRequest{} }
func (m *ListEnvironmentRequest) String() string            { return proto.CompactTextString(m) }
func (*ListEnvironmentRequest) ProtoMessage()               {}
func (*ListEnvironmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *ListEnvironmentRequest) GetApplicationId() int32 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

type ListEnvironmentResponse struct {
	Environments []*Environment `protobuf:"bytes,1,rep,name=environments" json:"environments,omitempty"`
}

func (m *ListEnvironmentResponse) Reset()                    { *m = ListEnvironmentResponse{} }
func (m *ListEnvironmentResponse) String() string            { return proto.CompactTextString(m) }
func (*ListEnvironmentResponse) ProtoMessage()               {}
func (*ListEnvironmentResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ListEnvironmentResponse) GetEnvironments() []*Environment {
	if m != nil {
		return m.Environments
	}
	return nil
}

type GetEnvironmentRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetEnvironmentRequest) Reset()                    { *m = GetEnvironmentRequest{} }
func (m *GetEnvironmentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEnvironmentRequest) ProtoMessage()               {}
func (*GetEnvironmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *GetEnvironmentRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Environment struct {
	Id            int32                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ApplicationId int32                  `protobuf:"varint,2,opt,name=application_id,json=applicationId" json:"application_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Slug          string                 `protobuf:"bytes,4,opt,name=slug" json:"slug,omitempty"`
	Vars          []*EnvironmentVariable `protobuf:"bytes,5,rep,name=vars" json:"vars,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *Environment) Reset()                    { *m = Environment{} }
func (m *Environment) String() string            { return proto.CompactTextString(m) }
func (*Environment) ProtoMessage()               {}
func (*Environment) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Environment) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Environment) GetApplicationId() int32 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *Environment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Environment) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *Environment) GetVars() []*EnvironmentVariable {
	if m != nil {
		return m.Vars
	}
	return nil
}

func (m *Environment) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

type EnvironmentVariable struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *EnvironmentVariable) Reset()                    { *m = EnvironmentVariable{} }
func (m *EnvironmentVariable) String() string            { return proto.CompactTextString(m) }
func (*EnvironmentVariable) ProtoMessage()               {}
func (*EnvironmentVariable) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *EnvironmentVariable) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnvironmentVariable) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type DestroyEnvironmentRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DestroyEnvironmentRequest) Reset()                    { *m = DestroyEnvironmentRequest{} }
func (m *DestroyEnvironmentRequest) String() string            { return proto.CompactTextString(m) }
func (*DestroyEnvironmentRequest) ProtoMessage()               {}
func (*DestroyEnvironmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *DestroyEnvironmentRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CopyEnvironmentRequest struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CopyEnvironmentRequest) Reset()                    { *m = CopyEnvironmentRequest{} }
func (m *CopyEnvironmentRequest) String() string            { return proto.CompactTextString(m) }
func (*CopyEnvironmentRequest) ProtoMessage()               {}
func (*CopyEnvironmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *CopyEnvironmentRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*ListEnvironmentRequest)(nil), "soapbox.ListEnvironmentRequest")
	proto.RegisterType((*ListEnvironmentResponse)(nil), "soapbox.ListEnvironmentResponse")
	proto.RegisterType((*GetEnvironmentRequest)(nil), "soapbox.GetEnvironmentRequest")
	proto.RegisterType((*Environment)(nil), "soapbox.Environment")
	proto.RegisterType((*EnvironmentVariable)(nil), "soapbox.EnvironmentVariable")
	proto.RegisterType((*DestroyEnvironmentRequest)(nil), "soapbox.DestroyEnvironmentRequest")
	proto.RegisterType((*CopyEnvironmentRequest)(nil), "soapbox.CopyEnvironmentRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Environments service

type EnvironmentsClient interface {
	ListEnvironments(ctx context.Context, in *ListEnvironmentRequest, opts ...grpc.CallOption) (*ListEnvironmentResponse, error)
	GetEnvironment(ctx context.Context, in *GetEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error)
	CreateEnvironment(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*Environment, error)
	DestroyEnvironment(ctx context.Context, in *DestroyEnvironmentRequest, opts ...grpc.CallOption) (*Empty, error)
	CopyEnvironment(ctx context.Context, in *CopyEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error)
}

type environmentsClient struct {
	cc *grpc.ClientConn
}

func NewEnvironmentsClient(cc *grpc.ClientConn) EnvironmentsClient {
	return &environmentsClient{cc}
}

func (c *environmentsClient) ListEnvironments(ctx context.Context, in *ListEnvironmentRequest, opts ...grpc.CallOption) (*ListEnvironmentResponse, error) {
	out := new(ListEnvironmentResponse)
	err := grpc.Invoke(ctx, "/soapbox.Environments/ListEnvironments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) GetEnvironment(ctx context.Context, in *GetEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := grpc.Invoke(ctx, "/soapbox.Environments/GetEnvironment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) CreateEnvironment(ctx context.Context, in *Environment, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := grpc.Invoke(ctx, "/soapbox.Environments/CreateEnvironment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) DestroyEnvironment(ctx context.Context, in *DestroyEnvironmentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/soapbox.Environments/DestroyEnvironment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) CopyEnvironment(ctx context.Context, in *CopyEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := grpc.Invoke(ctx, "/soapbox.Environments/CopyEnvironment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Environments service

type EnvironmentsServer interface {
	ListEnvironments(context.Context, *ListEnvironmentRequest) (*ListEnvironmentResponse, error)
	GetEnvironment(context.Context, *GetEnvironmentRequest) (*Environment, error)
	CreateEnvironment(context.Context, *Environment) (*Environment, error)
	DestroyEnvironment(context.Context, *DestroyEnvironmentRequest) (*Empty, error)
	CopyEnvironment(context.Context, *CopyEnvironmentRequest) (*Environment, error)
}

func RegisterEnvironmentsServer(s *grpc.Server, srv EnvironmentsServer) {
	s.RegisterService(&_Environments_serviceDesc, srv)
}

func _Environments_ListEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).ListEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.Environments/ListEnvironments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).ListEnvironments(ctx, req.(*ListEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_GetEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).GetEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.Environments/GetEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).GetEnvironment(ctx, req.(*GetEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Environment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.Environments/CreateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).CreateEnvironment(ctx, req.(*Environment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_DestroyEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).DestroyEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.Environments/DestroyEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).DestroyEnvironment(ctx, req.(*DestroyEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_CopyEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).CopyEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/soapbox.Environments/CopyEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).CopyEnvironment(ctx, req.(*CopyEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Environments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "soapbox.Environments",
	HandlerType: (*EnvironmentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEnvironments",
			Handler:    _Environments_ListEnvironments_Handler,
		},
		{
			MethodName: "GetEnvironment",
			Handler:    _Environments_GetEnvironment_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _Environments_CreateEnvironment_Handler,
		},
		{
			MethodName: "DestroyEnvironment",
			Handler:    _Environments_DestroyEnvironment_Handler,
		},
		{
			MethodName: "CopyEnvironment",
			Handler:    _Environments_CopyEnvironment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "environment.proto",
}

func init() { proto.RegisterFile("environment.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x8b, 0xda, 0x40,
	0x14, 0x35, 0x7e, 0x95, 0x5c, 0x35, 0xad, 0x53, 0x6b, 0xd3, 0xd0, 0x8f, 0x30, 0x50, 0x1a, 0x28,
	0x48, 0xb1, 0x2f, 0x7d, 0x13, 0x6b, 0x4b, 0x3f, 0xd8, 0xa7, 0x2c, 0xec, 0xc2, 0xbe, 0xc8, 0xc4,
	0x0c, 0x4b, 0x20, 0x66, 0x66, 0x33, 0xa3, 0xac, 0xff, 0x61, 0xff, 0xd2, 0xfe, 0xb7, 0xc5, 0x89,
	0x1b, 0x47, 0x9d, 0x80, 0x6f, 0x37, 0x77, 0xce, 0x3d, 0x9c, 0x73, 0xee, 0x0d, 0xf4, 0x69, 0xb6,
	0x4e, 0x72, 0x96, 0x2d, 0x69, 0x26, 0x47, 0x3c, 0x67, 0x92, 0xa1, 0x17, 0x82, 0x11, 0x1e, 0xb1,
	0x7b, 0xaf, 0xb7, 0x2b, 0x8a, 0x3e, 0x9e, 0xc0, 0xf0, 0x22, 0x11, 0xf2, 0xf7, 0x7e, 0x20, 0xa4,
	0x77, 0x2b, 0x2a, 0x24, 0xfa, 0x0c, 0x0e, 0xe1, 0x3c, 0x4d, 0x16, 0x44, 0x26, 0x2c, 0x9b, 0x27,
	0xb1, 0x6b, 0xf9, 0x56, 0xd0, 0x0a, 0x7b, 0x5a, 0xf7, 0x5f, 0x8c, 0x2f, 0xe1, 0xed, 0x09, 0x81,
	0xe0, 0x2c, 0x13, 0x14, 0xfd, 0x80, 0xae, 0x26, 0x44, 0xb8, 0x96, 0xdf, 0x08, 0x3a, 0xe3, 0xc1,
	0xe8, 0x59, 0x81, 0x3e, 0x73, 0x80, 0xc4, 0x5f, 0xe0, 0xcd, 0x1f, 0x6a, 0x12, 0xe5, 0x40, 0xbd,
	0x14, 0x52, 0x4f, 0x62, 0xfc, 0x68, 0x41, 0x47, 0x83, 0x1d, 0xbf, 0x1b, 0x4c, 0xd4, 0x0d, 0x26,
	0x10, 0x82, 0x66, 0x46, 0x96, 0xd4, 0x6d, 0xf8, 0x56, 0x60, 0x87, 0xaa, 0xde, 0xf6, 0x44, 0xba,
	0xba, 0x75, 0x9b, 0x45, 0x6f, 0x5b, 0xa3, 0x6f, 0xd0, 0x5c, 0x93, 0x5c, 0xb8, 0x2d, 0xe5, 0xe4,
	0xbd, 0xc9, 0xc9, 0x15, 0xc9, 0x13, 0x12, 0xa5, 0x34, 0x54, 0x48, 0xf4, 0x01, 0x60, 0x91, 0x53,
	0x22, 0x69, 0x3c, 0x27, 0xd2, 0x6d, 0x2b, 0x2e, 0x7b, 0xd7, 0x99, 0x4a, 0x3c, 0x81, 0xd7, 0x86,
	0xd9, 0x52, 0x8f, 0xa5, 0xe9, 0x19, 0x40, 0x6b, 0x4d, 0xd2, 0x15, 0x55, 0x0e, 0xec, 0xb0, 0xf8,
	0xc0, 0x5f, 0xe1, 0xdd, 0x2f, 0x2a, 0x64, 0xce, 0x36, 0x67, 0xa4, 0x15, 0xc0, 0x70, 0xc6, 0xf8,
	0x19, 0xc8, 0xf1, 0x43, 0x03, 0xba, 0x1a, 0x4c, 0xa0, 0x6b, 0x78, 0x75, 0xb4, 0x66, 0x81, 0x3e,
	0x95, 0xfe, 0xcd, 0x27, 0xe4, 0xf9, 0xd5, 0x80, 0xe2, 0x44, 0x70, 0x0d, 0xfd, 0x05, 0xe7, 0x70,
	0xd5, 0xe8, 0x63, 0x39, 0x65, 0xbc, 0x01, 0xcf, 0x78, 0x40, 0xb8, 0x86, 0xa6, 0xd0, 0x9f, 0xa9,
	0x60, 0x75, 0x32, 0x23, 0xb8, 0x92, 0xe2, 0x3f, 0xa0, 0xd3, 0x34, 0x11, 0x2e, 0xd1, 0x95, 0x51,
	0x7b, 0xce, 0x9e, 0x71, 0xc9, 0xe5, 0x46, 0x71, 0xbd, 0x3c, 0x0a, 0x5b, 0x0b, 0xcc, 0xbc, 0x86,
	0x2a, 0x5d, 0x3f, 0x3b, 0x37, 0xf6, 0xee, 0x81, 0x47, 0x51, 0x5b, 0xfd, 0xb9, 0xdf, 0x9f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xa5, 0xe4, 0xe3, 0x30, 0xe6, 0x03, 0x00, 0x00,
}
