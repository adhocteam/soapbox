<div class="card">
  <div class="card-header" >
    Applications
  </div>
  <div class="card-block" >
    <h4 class="card-title"><%= @app.name %></h4>
    <h6 class="card-subtitle mb-2 text-muted">ID: <%= @app.id %></h6>
    <p class="card-text">
      <% if !@app.description.blank? %>
      <%= @app.description %>
      <% else %>
      <i>No description.</i>
      <% end %>
    </p>
    <table class="table">
      <tbody>
        <tr>
          <th>Status</th>
          <td colspan="3"
            id="current-application"
            data-id="<%= @app.id %>"
            data-state="<%= @app.creation_state %>">
            <%=
            case @app.deletion_state
              when :NOT_DELETED
                case @app.creation_state
                  when :CREATE_INFRASTRUCTURE_WAIT then render(partial: "shared/spinner", locals: { pre_text: 'Creating...' })
                  when :CREATE_INFRASTRUCTURE_SUCCEEDED then 'Ready'
                  when :CREATE_INFRASTRUCTURE_FAILED then 'Failed to build'
                end
              when :DELETE_INFRASTRUCTURE_WAIT then render(partial: "shared/spinner", locals: { pre_text: 'Deleting...' })
              when :DELETE_INFRASTRUCTURE_SUCCEEDED then 'Deleted'
              when :DELETE_INFRASTRUCTURE_FAILED then 'Failed to delete'
            end
            %>
          </td>
        </tr>
        <tr>
          <th>GitHub repository</th>
          <td colspan="3"><a href="<%= @github_url %>"><code><%= @github_url %></code></a></td>
        </tr>
        <% if @deployment %>
          <tr id="current-deployment"
            data-state="<%= @deployment.state %>"
            data-id="<%= @deployment.id %>">
            <th>Latest deployment</th>
            <td>
              <%= ['success', 'failed'].include?(@deployment.state) ?  nil : render(partial: "shared/spinner", locals: { pre_text: 'Deploying...' }) %>
              <span class="deploy-status <%=
                case @deployment.state
                  when "success" then "deploy-status-success"
                  when "failed" then "deploy-status-failed"
                  when "rollout-wait", "evaluate-wait", "rollforward" then "deploy-status-inprogress"
                  else "deploy-status-unknown"
                end
              %>" title="<%= @deployment.state || 'unknown' %>"></span>
            </td>
            <td>
              <code><%= link_to @deployment.committish[0..7], "#{@github_url}/commit/#{@deployment.committish}" %></code> /
              <%= @deployment.env.name %>
            </td>
            <td>
              <%= Time.at(@deployment.created_at.seconds).strftime('%b %d, %Y Â· %l:%M %P') %>
            </td>
          </tr>
        <% else %>
          <tr>
            <th>Latest deployment</th>
            <td><%= link_to "Create your first deployment", new_application_deployment_path(@app.id) %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
    <p class="card-text text-muted"><small>Created: <%= Time.at(@app.created_at.seconds).strftime('%b %-d, %Y') %></small></p>
    <%= link_to 'View Environments', application_environments_path(@app.id), class: "btn btn-secondary" %>
    <%= link_to 'View Deployments', application_deployments_path(@app.id), class: "btn btn-secondary" %>
    <%= link_to 'Delete Application', application_path(@app.id), method: :delete, class: "btn btn-danger", data: { confirm: 'Are you sure? This will remove all application resources and make the application unavailable.' } %>
  </div>
</div>
<div class="card">
  <div class="card-header">Stats</div>
  <div class="card-block">
    <div id="curve_chart"></div>
  </div>
  <div class="card-block">
    <div id="latency_chart"></div>
  </div>
  <div class="card-block">
    <div id="4xx_chart"></div>
  </div>
  <div class="card-block">
    <div id="5xx_chart"></div>
  </div>
  <div class="card-block">
    <div id="2xx_chart"></div>
  </div>
</div>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<%= javascript_tag do -%>
  google.charts.load('current', {'packages':['corechart']});
  google.charts.setOnLoadCallback(drawRequestsChart);
  google.charts.setOnLoadCallback(drawLatencyChart);
  google.charts.setOnLoadCallback(draw4xxChart);
  google.charts.setOnLoadCallback(draw2xxChart);

  function drawRequestsChart() {
    var data = google.visualization.arrayToDataTable(<%= raw [["Time", "Requests"]] + get_metrics(@app.id, Soapbox::MetricType::REQUEST_COUNT) %>);

    if (data.getNumberOfRows() === 0) {
      return;
    }
    var options = {
      title: 'Request Count',
      curveType: 'function',
      legend: { position: 'bottom' },
      vAxis: {
        viewWindow: {
          min: 0
        }
      }
    };

    var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));
    chart.draw(data, options);
  }

  function drawLatencyChart() {
    var data = google.visualization.arrayToDataTable(<%= raw [["Time", "Average Latency (Milliseconds)"]] + get_metrics(@app.id, Soapbox::MetricType::LATENCY) %>);
    if (data.getNumberOfRows() === 0) {
      return;
    }
    var options = {
      title: 'Request Latency',
      curveType: 'function',
      legend: { position: 'bottom' },
      vAxis: {
        viewWindow: {
          min: 0
        }
      }
    };

    var chart = new google.visualization.LineChart(document.getElementById('latency_chart'));
    chart.draw(data, options);
  }

  function draw4xxChart() {
    var data = google.visualization.arrayToDataTable(<%= raw [["Time", "HTTP 4XXs (Count)"]] + get_metrics(@app.id, Soapbox::MetricType::HTTP_4XX_COUNT) %>);
    if (data.getNumberOfRows() === 0) {
      return;
    }
    var options = {
      title: 'HTTP 4XXs (Count)',
      curveType: 'function',
      legend: { position: 'bottom' },
      vAxis: {
        viewWindow: {
          min: 0
        }
      }
    };

    var chart = new google.visualization.LineChart(document.getElementById('4xx_chart'));
    chart.draw(data, options);
  }

  function draw2xxChart() {
    var data = google.visualization.arrayToDataTable(<%= raw [["Time", "HTTP 2XXs (Count)"]] + get_metrics(@app.id, Soapbox::MetricType::HTTP_2XX_COUNT) %>);
    if (data.getNumberOfRows() === 0) {
      return;
    }
    var options = {
      title: 'HTTP 2XXs (Count)',
      curveType: 'function',
      legend: { position: 'bottom' },
      vAxis: {
        viewWindow: {
          min: 0
        }
      }
    };

    var chart = new google.visualization.LineChart(document.getElementById('2xx_chart'));
    chart.draw(data, options);
  }

<% end -%>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    let el = document.getElementById("current-deployment");
    let app = new DeploymentsApp(el, <%= @app.id %>);
    app.start();

    el = document.getElementById("current-application");
    app = new ApplicationsApp(el);
    app.start();
  });
</script>
